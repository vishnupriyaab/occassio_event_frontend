import { EmojiComponent } from '@ctrl/ngx-emoji-mart/ngx-emoji';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@ctrl/ngx-emoji-mart/ngx-emoji";
import * as i2 from "./emoji-frequently.service";
import * as i3 from "@angular/common";
class CategoryComponent {
    ref;
    emojiService;
    frequently;
    emojis = null;
    hasStickyPosition = true;
    name = '';
    perLine = 9;
    totalFrequentLines = 4;
    recent = [];
    custom = [];
    i18n;
    id;
    hideObsolete = true;
    notFoundEmoji;
    virtualize = false;
    virtualizeOffset = 0;
    emojiIsNative;
    emojiSkin;
    emojiSize;
    emojiSet;
    emojiSheetSize;
    emojiForceSize;
    emojiTooltip;
    emojiBackgroundImageFn;
    emojiImageUrlFn;
    emojiUseButton;
    /**
     * Note: the suffix is added explicitly so we know the event is dispatched outside of the Angular zone.
     */
    emojiOverOutsideAngular = new EventEmitter();
    emojiLeaveOutsideAngular = new EventEmitter();
    emojiClickOutsideAngular = new EventEmitter();
    container;
    label;
    containerStyles = {};
    emojisToDisplay = [];
    filteredEmojisSubject = new Subject();
    filteredEmojis$ = this.filteredEmojisSubject.asObservable();
    labelStyles = {};
    labelSpanStyles = {};
    margin = 0;
    minMargin = 0;
    maxMargin = 0;
    top = 0;
    rows = 0;
    constructor(ref, emojiService, frequently) {
        this.ref = ref;
        this.emojiService = emojiService;
        this.frequently = frequently;
    }
    ngOnInit() {
        this.updateRecentEmojis();
        this.emojisToDisplay = this.filterEmojis();
        if (this.noEmojiToDisplay) {
            this.containerStyles = { display: 'none' };
        }
        if (!this.hasStickyPosition) {
            this.labelStyles = { height: 28 };
            // this.labelSpanStyles = { position: 'absolute' };
        }
    }
    ngOnChanges(changes) {
        if (changes.emojis?.currentValue?.length !== changes.emojis?.previousValue?.length) {
            this.emojisToDisplay = this.filterEmojis();
            this.ngAfterViewInit();
        }
    }
    ngAfterViewInit() {
        if (!this.virtualize) {
            return;
        }
        const { width } = this.container.nativeElement.getBoundingClientRect();
        const perRow = Math.floor(width / (this.emojiSize + 12));
        this.rows = Math.ceil(this.emojisToDisplay.length / perRow);
        this.containerStyles = {
            ...this.containerStyles,
            minHeight: `${this.rows * (this.emojiSize + 12) + 28}px`,
        };
        this.ref.detectChanges();
        this.handleScroll(this.container.nativeElement.parentNode.parentNode.scrollTop);
    }
    get noEmojiToDisplay() {
        return this.emojisToDisplay.length === 0;
    }
    memoizeSize() {
        const parent = this.container.nativeElement.parentNode.parentNode;
        const { top, height } = this.container.nativeElement.getBoundingClientRect();
        const parentTop = parent.getBoundingClientRect().top;
        const labelHeight = this.label.nativeElement.getBoundingClientRect().height;
        this.top = top - parentTop + parent.scrollTop;
        if (height === 0) {
            this.maxMargin = 0;
        }
        else {
            this.maxMargin = height - labelHeight;
        }
    }
    handleScroll(scrollTop) {
        let margin = scrollTop - this.top;
        margin = margin < this.minMargin ? this.minMargin : margin;
        margin = margin > this.maxMargin ? this.maxMargin : margin;
        if (this.virtualize) {
            const { top, height } = this.container.nativeElement.getBoundingClientRect();
            const parentHeight = this.container.nativeElement.parentNode.parentNode.clientHeight;
            if (parentHeight + (parentHeight + this.virtualizeOffset) >= top &&
                -height - (parentHeight + this.virtualizeOffset) <= top) {
                this.filteredEmojisSubject.next(this.emojisToDisplay);
            }
            else {
                this.filteredEmojisSubject.next([]);
            }
        }
        if (margin === this.margin) {
            this.ref.detectChanges();
            return false;
        }
        if (!this.hasStickyPosition) {
            this.label.nativeElement.style.top = `${margin}px`;
        }
        this.margin = margin;
        this.ref.detectChanges();
        return true;
    }
    updateRecentEmojis() {
        if (this.name !== 'Recent') {
            return;
        }
        let frequentlyUsed = this.recent || this.frequently.get(this.perLine, this.totalFrequentLines);
        if (!frequentlyUsed || !frequentlyUsed.length) {
            frequentlyUsed = this.frequently.get(this.perLine, this.totalFrequentLines);
        }
        if (!frequentlyUsed.length) {
            return;
        }
        this.emojis = frequentlyUsed
            .map(id => {
            const emoji = this.custom.filter((e) => e.id === id)[0];
            if (emoji) {
                return emoji;
            }
            return id;
        })
            .filter(id => !!this.emojiService.getData(id));
    }
    updateDisplay(display) {
        this.containerStyles.display = display;
        this.updateRecentEmojis();
        this.ref.detectChanges();
    }
    trackById(index, item) {
        return item;
    }
    filterEmojis() {
        const newEmojis = [];
        for (const emoji of this.emojis || []) {
            if (!emoji) {
                continue;
            }
            const data = this.emojiService.getData(emoji);
            if (!data || (data.obsoletedBy && this.hideObsolete) || (!data.unified && !data.custom)) {
                continue;
            }
            newEmojis.push(emoji);
        }
        return newEmojis;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: CategoryComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.EmojiService }, { token: i2.EmojiFrequentlyService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.2", type: CategoryComponent, isStandalone: true, selector: "emoji-category", inputs: { emojis: "emojis", hasStickyPosition: "hasStickyPosition", name: "name", perLine: "perLine", totalFrequentLines: "totalFrequentLines", recent: "recent", custom: "custom", i18n: "i18n", id: "id", hideObsolete: "hideObsolete", notFoundEmoji: "notFoundEmoji", virtualize: "virtualize", virtualizeOffset: "virtualizeOffset", emojiIsNative: "emojiIsNative", emojiSkin: "emojiSkin", emojiSize: "emojiSize", emojiSet: "emojiSet", emojiSheetSize: "emojiSheetSize", emojiForceSize: "emojiForceSize", emojiTooltip: "emojiTooltip", emojiBackgroundImageFn: "emojiBackgroundImageFn", emojiImageUrlFn: "emojiImageUrlFn", emojiUseButton: "emojiUseButton" }, outputs: { emojiOverOutsideAngular: "emojiOverOutsideAngular", emojiLeaveOutsideAngular: "emojiLeaveOutsideAngular", emojiClickOutsideAngular: "emojiClickOutsideAngular" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true, static: true }, { propertyName: "label", first: true, predicate: ["label"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `
    <section
      #container
      class="emoji-mart-category"
      [attr.aria-label]="i18n.categories[id]"
      [class.emoji-mart-no-results]="noEmojiToDisplay"
      [ngStyle]="containerStyles"
    >
      <div class="emoji-mart-category-label" [ngStyle]="labelStyles" [attr.data-name]="name">
        <!-- already labeled by the section aria-label -->
        <span #label [ngStyle]="labelSpanStyles" aria-hidden="true">
          {{ i18n.categories[id] }}
        </span>
      </div>

      <div *ngIf="virtualize; else normalRenderTemplate">
        <div *ngIf="filteredEmojis$ | async as filteredEmojis">
          <ngx-emoji
            *ngFor="let emoji of filteredEmojis; trackBy: trackById"
            [emoji]="emoji"
            [size]="emojiSize"
            [skin]="emojiSkin"
            [isNative]="emojiIsNative"
            [set]="emojiSet"
            [sheetSize]="emojiSheetSize"
            [forceSize]="emojiForceSize"
            [tooltip]="emojiTooltip"
            [backgroundImageFn]="emojiBackgroundImageFn"
            [imageUrlFn]="emojiImageUrlFn"
            [hideObsolete]="hideObsolete"
            [useButton]="emojiUseButton"
            (emojiOverOutsideAngular)="emojiOverOutsideAngular.emit($event)"
            (emojiLeaveOutsideAngular)="emojiLeaveOutsideAngular.emit($event)"
            (emojiClickOutsideAngular)="emojiClickOutsideAngular.emit($event)"
          ></ngx-emoji>
        </div>
      </div>

      <div *ngIf="noEmojiToDisplay">
        <div>
          <ngx-emoji
            [emoji]="notFoundEmoji"
            [size]="38"
            [skin]="emojiSkin"
            [isNative]="emojiIsNative"
            [set]="emojiSet"
            [sheetSize]="emojiSheetSize"
            [forceSize]="emojiForceSize"
            [tooltip]="emojiTooltip"
            [backgroundImageFn]="emojiBackgroundImageFn"
            [useButton]="emojiUseButton"
          ></ngx-emoji>
        </div>

        <div class="emoji-mart-no-results-label">
          {{ i18n.notfound }}
        </div>
      </div>
    </section>

    <ng-template #normalRenderTemplate>
      <ngx-emoji
        *ngFor="let emoji of emojisToDisplay; trackBy: trackById"
        [emoji]="emoji"
        [size]="emojiSize"
        [skin]="emojiSkin"
        [isNative]="emojiIsNative"
        [set]="emojiSet"
        [sheetSize]="emojiSheetSize"
        [forceSize]="emojiForceSize"
        [tooltip]="emojiTooltip"
        [backgroundImageFn]="emojiBackgroundImageFn"
        [imageUrlFn]="emojiImageUrlFn"
        [hideObsolete]="hideObsolete"
        [useButton]="emojiUseButton"
        (emojiOverOutsideAngular)="emojiOverOutsideAngular.emit($event)"
        (emojiLeaveOutsideAngular)="emojiLeaveOutsideAngular.emit($event)"
        (emojiClickOutsideAngular)="emojiClickOutsideAngular.emit($event)"
      ></ngx-emoji>
    </ng-template>
  `, isInline: true, dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "component", type: EmojiComponent, selector: "ngx-emoji", inputs: ["skin", "set", "sheetSize", "isNative", "forceSize", "tooltip", "size", "emoji", "fallback", "hideObsolete", "sheetRows", "sheetColumns", "useButton", "backgroundImageFn", "imageUrlFn"], outputs: ["emojiOver", "emojiOverOutsideAngular", "emojiLeave", "emojiLeaveOutsideAngular", "emojiClick", "emojiClickOutsideAngular"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
export { CategoryComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: CategoryComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'emoji-category',
                    template: `
    <section
      #container
      class="emoji-mart-category"
      [attr.aria-label]="i18n.categories[id]"
      [class.emoji-mart-no-results]="noEmojiToDisplay"
      [ngStyle]="containerStyles"
    >
      <div class="emoji-mart-category-label" [ngStyle]="labelStyles" [attr.data-name]="name">
        <!-- already labeled by the section aria-label -->
        <span #label [ngStyle]="labelSpanStyles" aria-hidden="true">
          {{ i18n.categories[id] }}
        </span>
      </div>

      <div *ngIf="virtualize; else normalRenderTemplate">
        <div *ngIf="filteredEmojis$ | async as filteredEmojis">
          <ngx-emoji
            *ngFor="let emoji of filteredEmojis; trackBy: trackById"
            [emoji]="emoji"
            [size]="emojiSize"
            [skin]="emojiSkin"
            [isNative]="emojiIsNative"
            [set]="emojiSet"
            [sheetSize]="emojiSheetSize"
            [forceSize]="emojiForceSize"
            [tooltip]="emojiTooltip"
            [backgroundImageFn]="emojiBackgroundImageFn"
            [imageUrlFn]="emojiImageUrlFn"
            [hideObsolete]="hideObsolete"
            [useButton]="emojiUseButton"
            (emojiOverOutsideAngular)="emojiOverOutsideAngular.emit($event)"
            (emojiLeaveOutsideAngular)="emojiLeaveOutsideAngular.emit($event)"
            (emojiClickOutsideAngular)="emojiClickOutsideAngular.emit($event)"
          ></ngx-emoji>
        </div>
      </div>

      <div *ngIf="noEmojiToDisplay">
        <div>
          <ngx-emoji
            [emoji]="notFoundEmoji"
            [size]="38"
            [skin]="emojiSkin"
            [isNative]="emojiIsNative"
            [set]="emojiSet"
            [sheetSize]="emojiSheetSize"
            [forceSize]="emojiForceSize"
            [tooltip]="emojiTooltip"
            [backgroundImageFn]="emojiBackgroundImageFn"
            [useButton]="emojiUseButton"
          ></ngx-emoji>
        </div>

        <div class="emoji-mart-no-results-label">
          {{ i18n.notfound }}
        </div>
      </div>
    </section>

    <ng-template #normalRenderTemplate>
      <ngx-emoji
        *ngFor="let emoji of emojisToDisplay; trackBy: trackById"
        [emoji]="emoji"
        [size]="emojiSize"
        [skin]="emojiSkin"
        [isNative]="emojiIsNative"
        [set]="emojiSet"
        [sheetSize]="emojiSheetSize"
        [forceSize]="emojiForceSize"
        [tooltip]="emojiTooltip"
        [backgroundImageFn]="emojiBackgroundImageFn"
        [imageUrlFn]="emojiImageUrlFn"
        [hideObsolete]="hideObsolete"
        [useButton]="emojiUseButton"
        (emojiOverOutsideAngular)="emojiOverOutsideAngular.emit($event)"
        (emojiLeaveOutsideAngular)="emojiLeaveOutsideAngular.emit($event)"
        (emojiClickOutsideAngular)="emojiClickOutsideAngular.emit($event)"
      ></ngx-emoji>
    </ng-template>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    standalone: true,
                    imports: [CommonModule, EmojiComponent],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.EmojiService }, { type: i2.EmojiFrequentlyService }]; }, propDecorators: { emojis: [{
                type: Input
            }], hasStickyPosition: [{
                type: Input
            }], name: [{
                type: Input
            }], perLine: [{
                type: Input
            }], totalFrequentLines: [{
                type: Input
            }], recent: [{
                type: Input
            }], custom: [{
                type: Input
            }], i18n: [{
                type: Input
            }], id: [{
                type: Input
            }], hideObsolete: [{
                type: Input
            }], notFoundEmoji: [{
                type: Input
            }], virtualize: [{
                type: Input
            }], virtualizeOffset: [{
                type: Input
            }], emojiIsNative: [{
                type: Input
            }], emojiSkin: [{
                type: Input
            }], emojiSize: [{
                type: Input
            }], emojiSet: [{
                type: Input
            }], emojiSheetSize: [{
                type: Input
            }], emojiForceSize: [{
                type: Input
            }], emojiTooltip: [{
                type: Input
            }], emojiBackgroundImageFn: [{
                type: Input
            }], emojiImageUrlFn: [{
                type: Input
            }], emojiUseButton: [{
                type: Input
            }], emojiOverOutsideAngular: [{
                type: Output
            }], emojiLeaveOutsideAngular: [{
                type: Output
            }], emojiClickOutsideAngular: [{
                type: Output
            }], container: [{
                type: ViewChild,
                args: ['container', { static: true }]
            }], label: [{
                type: ViewChild,
                args: ['label', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,